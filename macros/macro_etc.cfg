#.................................................................................................................
[delayed_gcode prerun]
initial_duration: 1
gcode:
    {% set z_offset = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set nozzle_diameter = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
    QUERY_PROBE
    M117 Printer online.
    {% for s in range(0, 30) %}
        STATUS_READY
        G4 P100
        STATUS_BUSY
        G4 P50
    {% endfor %}
    M118 "probe: TRIGGERED" = Euclid probe NOT attached.
    M118 Z-Offset is set at {z_offset}mm.
    M118 Nozzle diameter is set at {nozzle_diameter}mm.
    STATUS_READY
	
	
#.................................................................................................................
[gcode_macro CLEAN_NOZZLE]
description: Wipe the nozzle on the brush
gcode:
    # Set vars
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set Sc = printer["gcode_macro _USER_VARIABLES"].brush_clean_speed * 60 %}

    {% set Px = printer["gcode_macro _USER_VARIABLES"].purge_bucket_x %}
    {% set Py = printer["gcode_macro _USER_VARIABLES"].purge_bucket_y %}

    {% set Bx = printer["gcode_macro _USER_VARIABLES"].brush_x %}
    {% set By = printer["gcode_macro _USER_VARIABLES"].brush_y %}
    {% set Bz = printer["gcode_macro _USER_VARIABLES"].brush_z %}

	STATUS_BUSY

    ; Move to purge zone (left side)
    G90
    G1 X{Px} Y{Py} Z{Bz} F{St}
    ; Move to center of the brush
    G1 X{Bx} Y{By} Z{Bz} F{St}

	STATUS_CLEANING
	
    ; Wipe procedure
    G91
    {% for wipe in range(6) %}
        G1 Y-5 F{Sc}
        G1 Y+5 F{Sc}
    {% endfor %}

    G1 X+20 F{Sc}
    {% for wipe in range(6) %}
        G1 X-40 F{Sc}
        G1 X+40 F{Sc}
    {% endfor %}

	STATUS_BUSY
	
    G1 Z{Bz|int + 10} F{Sz}
	
    G90
	
	STATUS_READY


[gcode_macro PURGE]
description: Purge a specific amount of filament ontop of the purge bucket
gcode:
    {% set DISTANCE = params.DISTANCE|default(30)|float %}
    {% set TEMP = params.TEMP|default(230)|float %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set Px = printer["gcode_macro _USER_VARIABLES"].purge_bucket_x %}
    {% set Py = printer["gcode_macro _USER_VARIABLES"].purge_bucket_y %}
    {% set Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_z %}

	STATUS_BUSY

    # Move to purge zone (left side)
    G90
    G1 X{Px} Y{Py} Z{Pz} F{St}

    # Heat if needed and purge
    _LOW_TEMP_CHECK T={TEMP}

	STATUS_CLEANING
  
    G92 E0
    G1 E{DISTANCE|float} F150
  
    # Retract
    G92 E0
    G1 E-1.7 F2100
    G1 E-2.3 F150

    # Wait 20s to let the nozzle ooze before cleaning
    #G1 Z{Pz|int + 5} F{Sz}
    #G4 P{20 * 1000}
  
    G92 E0

	STATUS_READY


#.................................................................................................................
[gcode_macro PARK]
description: Park the toolhead at the back and retract some filament if the nozzle is hot
gcode:
    {% set E = params.E|default(1.7)|float %}

    {% set Px = printer["gcode_macro _USER_VARIABLES"].purge_bucket_x %}
    {% set Py = printer["gcode_macro _USER_VARIABLES"].purge_bucket_y %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 50.0) %}
        {% set z_safe = 50.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}

    {% if printer.extruder.temperature > 185 %}
        G1 E-{E} F2100
    {% endif %}

	STATUS_BUSY

    G91    
    G1 Z{z_safe} F{Sz}
    G90
    G1 X{Px} Y{Py} F{St}
    G91

	STATUS_READY


[gcode_macro PARKCENTER]
description: Park the toolhead at the Center
gcode:
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    STATUS_BUSY
    G0 X{max_x|int / 2} Y{max_y|int / 2} Z50 F{St}

	STATUS_READY

[gcode_macro PARKFRONT]
description: Park the toolhead at the back and retract some filament if the nozzle is hot
gcode:
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    STATUS_BUSY
    G0 X{max_x|int / 2} Y0 Z50 F{St}

	STATUS_READY

#.................................................................................................................
[gcode_macro _LOW_TEMP_CHECK]
description: Check the nozzle is at temperature and heat it if needed
gcode: 
    {% set T = params.T|default(230)|float %}

    {% if printer.extruder.target != 0 %}
        {% if printer.extruder.temperature < printer.extruder.target %}
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %}
        {% if printer.extruder.target < T %}
            M109 S{T}
        {% endif %}
    {% endif %}


#.................................................................................................................
# Filament change
[gcode_macro CHANGE_FILAMENT]
gcode:
    {% set TEMP = params.TEMP|default(230)|float %}

 	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_state
    PAUSE
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set TEMP = params.TEMP|default(230)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

    M400
	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
	_LOW_TEMP_CHECK T={TEMP}
    M82
    ; Filament tip shaping sequence
    G92 E0
    G1 E2 F3600
    G1 E0 F3600
    G1 E3 F3600
    G1 E0 F3600
    G1 E4 F3600
    G1 E0 F3600

    M83
    G1 E-20 F3600
    G4 P3000
    G1 E{DISTANCE|float * -1} F3000
	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set TEMP = params.TEMP|default(230)|float %}
    {% set DISTANCE = params.DISTANCE|default(105)|float %}

	M400
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT_state
	_LOW_TEMP_CHECK T={TEMP}
    M83
	G92 E0
    G1 E{DISTANCE|float} F200

    {% if 'xyz' in printer.toolhead.homed_axes %}
        PURGE TEMP={TEMP} DISTANCE=50
    {% else %}
        G1 E50 F150
    {% endif %}
    
	G92 E0
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state


#.................................................................................................................
# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
	
[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/scripts/git_backup.sh
timeout: 30.
verbose: True


#.................................................................................................................
### SEARCH_VARS S=XXX ###
[gcode_macro SEARCH_VARS]
description: Search for variables in the "printer" object from Klipper
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
